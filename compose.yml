services:
  app:
    build:
      context: .
      dockerfile: Dockerfile
    image: app:1.0
    container_name: app
    env_file:
      - .env
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
    restart: always
    networks:
      - application_network
    ports:
      - 80:80
    depends_on:
      postgres:
        condition: service_healthy

  postgres:
    image: postgres:16-alpine
    container_name: postgres
    env_file:
      - .env
    environment:
      - POSTGRES_DB=${DATABASE_NAME}
      - POSTGRES_USER=${DATABASE_USER}
      - POSTGRES_PASSWORD=${DATABASE_USER_PASSWORD}
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${DATABASE_USER} -d ${DATABASE_NAME}" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - application_network
    volumes:
      - postgres_data:/var/lib/postgresql/data

  alembic:
    image: app:1.0
    container_name: alembic
    env_file:
      - .env
    environment:
      - DATABASE_HOST=postgres
      - DATABASE_PORT=5432
    restart: no
    command: alembic upgrade head
    networks:
      - application_network
    depends_on:
      postgres:
        condition: service_healthy


networks:
  application_network:
    driver: bridge


volumes:
  postgres_data:
